# Generated by Django 4.2.20 on 2025-05-03 21:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('administrator', 'Administrator'), ('inventory_manager', 'Inventory Manager'), ('salesperson', 'Salesperson'), ('purchasing_officer', 'Purchasing Officer')], default='administrator', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(default='Walk in customer', max_length=255)),
                ('telephone', models.CharField(max_length=11)),
                ('address_street', models.CharField(max_length=255)),
                ('address_city', models.CharField(max_length=255)),
                ('address_postcode', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventoryID', models.AutoField(primary_key=True, serialize=False)),
                ('quantityAvailable', models.PositiveIntegerField()),
                ('minimumStockLevel', models.PositiveIntegerField()),
                ('maximumStockLevel', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Inventories',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barCode', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('expiryDate', models.DateField(blank=True, null=True)),
                ('averageCostPrice', models.DecimalField(decimal_places=2, default=0, help_text='Average cost price of the product', max_digits=10)),
                ('sellingPrice', models.DecimalField(decimal_places=2, max_digits=10)),
                ('packedWeight', models.FloatField(blank=True, null=True)),
                ('packedHeight', models.FloatField(blank=True, null=True)),
                ('packedWidth', models.FloatField(blank=True, null=True)),
                ('packedDepth', models.FloatField(blank=True, null=True)),
                ('refrigerated', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.category')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('address_street', models.CharField(max_length=255)),
                ('address_city', models.CharField(max_length=255)),
                ('address_postcode', models.CharField(max_length=20)),
                ('telephone', models.CharField(max_length=11)),
                ('businessName', models.CharField(max_length=255)),
                ('accountNumber', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('isRefrigerated', models.BooleanField(default=False)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouses', to='core.location')),
            ],
        ),
        migrations.CreateModel(
            name='SalesOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('DELIVERED', 'Delivered'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=100)),
                ('totalPrice', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=12)),
                ('totalItems', models.PositiveIntegerField(default=0)),
                ('paymentType', models.CharField(max_length=100)),
                ('createdBy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='SalesItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('totalAmount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('salesOrder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salesorder')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('deliveryDate', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('APPROVED', 'Approved'), ('ORDERED', 'Ordered'), ('RECEIVED', 'Received'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=100)),
                ('totalPrice', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('totalItems', models.PositiveIntegerField(default=0)),
                ('paymentStatus', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid')], default='Unpaid', max_length=100)),
                ('paymentType', models.CharField(choices=[('CASH', 'Cash'), ('CHEQUE', 'Cheque'), ('BANK_TRANSFER', 'Bank Transfer'), ('MOBILE_PAYMENT', 'Mobile Payment'), ('OTHER', 'Other')], default='Cash', max_length=100)),
                ('createdBy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('deliveryWarehouse', models.ForeignKey(blank=True, help_text='The warehouse where these items will be delivered', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.warehouse')),
                ('supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase_orders', to='core.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unitCostPrice', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('orderQuantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)])),
                ('totalAmount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('purchaseOrder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.purchaseorder')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='warehouses',
            field=models.ManyToManyField(through='core.Inventory', to='core.warehouse'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='warehouse',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.warehouse'),
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('product', 'warehouse')},
        ),
    ]
